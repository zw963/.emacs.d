# -*- mode: snippet -*-
# name: avram init
# key: avraminit
# contributor: Billy.Zheng vil963@gmail.com
# --
require "pg"
require "avram"

class AppDatabase < Avram::Database
end

AppDatabase.configure do |settings|
settings.credentials = Avram::Credentials.new(database: "test_db", username: "postgres", hostname: "localhost")
end

Avram.configure do |settings|
settings.database_to_migrate = AppDatabase
settings.lazy_load_enabled = true
end

class CreateFoo::V20240420041991 < Avram::Migrator::Migration::V1
def migrate
create table_for(Foo), if_not_exists: true do
primary_key id : Int64
add name : String
add description : String
add is_211 : Bool, index: true, default: false
add_timestamps
end
end

def rollback
drop table_for(Foo)
end
end

Avram::Migrator::Runner.drop_db(true)
Avram::Migrator::Runner.create_db(true)
Avram::Migrator::Runner.new.run_next_migration

abstract class BaseModel < Avram::Model
def self.database : Avram::Database.class
AppDatabase
end
end

class Foo < BaseModel
# skip_default_columns
table do
column is_211 : Bool
column name : String
column description : String
end
end

Foo::SaveOperation.create!(name: "foo1", description: "bar", is_211: true)
Foo::SaveOperation.create!(name: "foo", description: "bar", is_211: true)
Foo::SaveOperation.create!(name: "foo", description: "bar", is_211: true)
Foo::SaveOperation.create!(name: "foo", description: "bar1", is_211: false)

query = Foo::BaseQuery.new.where("(name = ?", "foo1").or(&.where("description = ?)", "bar1"))

pp! query.to_prepared_sql # "SELECT foos.id, foos.created_at, foos.updated_at, foos.is_211, foos.name, foos.description FROM foos (WHERE name = 'foo1' OR description = 'bar1')

pp! query.to_prepared_sql # "SELECT foos.id, foos.created_at, foos.updated_at, foos.is_211, foos.name, foos.description FROM foos (WHERE name = 'foo1' OR description = 'bar1') AND foos.is_211 = 'false'"
